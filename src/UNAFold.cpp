/*
 * @file   UNAFold.cpp
 * @brief  UNAFold is the implementation of IFold interface. It's a specific backend to folding.
 *
 * @author Franco Riberi
 * @email  fgriberi AT gmail.com
 *
 * Contents:  Source file for fideo providing backend UNAFold implementation.
 *
 * System:    fideo: Folding Interface Dynamic Exchange Operations
 * Language:  C++
 *
 * @date November 10, 2010, 4:26 PM
 *
 * Copyright (C) 2012 Franco Riberi, FuDePAN
 *
 * This file is part of fideo.
 *
 * fideo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * fideo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with vac-o.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include <unistd.h>
#include <etilico/etilico.h>
#include "fideo/IFold.h"

namespace fideo
{

using namespace mili;

//UNAFold package
class UNAFold : public IFold
{
private:
    static void deleteAllFiles(const std::string& nameFile);    
    virtual Fe fold(const biopp::NucSequence& seqRNAm, bool isCircRNAm, biopp::SecStructure& structureRNAm) const;
    //std::ifstream fileIn;

	///Class that allows parsing the header of a file
    class HeaderParser
    {       
    public:
        void parse(std::ifstream& file);        

        biopp::SeqIndex numberOfBases;
        Fe deltaG;
        std::string sequenceName;

    private:
        enum Columns
        {
            ColNumberOfBases,
            ColDeltaGStr,
            ColEqualSymbol,
            ColDeltaG,
            ColSeqName,
            NumberOfColumns
        };
    };
 
	///Class that allows parsing the body of a file     
    class BodyLineParser
    {       
    public:      

        bool parse(std::ifstream& file);        

        char nuc;				   /// a nucleotid
        biopp::SeqIndex nucNumber; /// starts at 1!. Number of nucleotid in sequence
        biopp::SeqIndex pairedNuc; /// starts at 1!. Nucleotid paired.

    private:
        enum Columns
        {
            ColNucleotideNumber,
            ColNucl,
            ColPrevious,
            ColNext,
            ColPairedWith,
            ColNumberOfBases2,
            Col7,  // not used
            Col8,  // not used
            NumberOfColumns
        };
    };   

	 /** @brief fill structure
     * 
     * @param bodyLine: to parse. 
     * @param secStructure: structure to fill
     * @return void
     */
    static void fillStructure(const BodyLineParser& bodyLine, biopp::SecStructure& secStructure);
};


void UNAFold::HeaderParser::parse(std::ifstream& file)
{
    std::vector<std::string> aux;
    if (file >> aux)
    {
        if (aux.size() != NumberOfColumns)
        {
            throw RNABackendException("Invalid Header.");
        }
        helper::convertFromString(aux[ColNumberOfBases], numberOfBases);
        helper::convertFromString(aux[ColDeltaG], deltaG);
        sequenceName = aux[ColSeqName];
    }
    else
    {
        throw RNABackendException("Failured operation >>.");
    }
}

bool UNAFold::BodyLineParser::parse(std::ifstream& file)
{
    std::vector<std::string> aux;
    const bool ret = (file >> aux);

    if (ret)
    {
        if (aux.size() != NumberOfColumns)
        {
            throw RNABackendException("Invalid BodyLine.");
        }
        helper::convertFromString(aux[ColNucl], nuc);
        helper::convertFromString(aux[ColNucleotideNumber], nucNumber);
        helper::convertFromString(aux[ColPairedWith], pairedNuc);
    }
    return ret;
}

REGISTER_FACTORIZABLE_CLASS(IFold, UNAFold, std::string, "UNAFold");

static const std::string PATH_TMP = "/tmp/";

void UNAFold::deleteAllFiles(const std::string& nameFile)
{
    mili::assert_throw<ExceptionUnlink>(unlink(nameFile.c_str()));    
	
	///remove others files generated by UNAFold
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".ct").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + "_1.ct").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".dG").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".h-num").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".rnaml").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".plot").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".run").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".ss-count").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".ann").c_str()));
    mili::assert_throw<ExceptionUnlink>(unlink((nameFile + ".det").c_str()));        
}

void UNAFold::fillStructure(const BodyLineParser& bodyLine, biopp::SecStructure& secStructure)
{
    if (bodyLine.pairedNuc == 0) ///means unpaired
    {
        secStructure.unpair(bodyLine.nucNumber - 1);
    }
    else
    {
        secStructure.pair(bodyLine.nucNumber - 1, bodyLine.pairedNuc - 1);
    }
}

Fe UNAFold::fold(const biopp::NucSequence& seqRNAm, bool isCircRNAm, biopp::SecStructure& structureRNAm) const
{
    structureRNAm.clear();
    FileLine sseq = seqRNAm.getString();

    std::string temporalFile;
    helper::createTmpFile(temporalFile);

    helper::write(temporalFile, sseq);
    std::stringstream ss;
    ss << "UNAFold.pl --max=1 ";
    if (isCircRNAm)
    {
        ss << "--circular ";
    }
    ss << temporalFile;

    if (chdir(PATH_TMP.c_str()) != 0)
    {
        throw RNABackendException("Invalid path of temp files.");
    }
    const etilico::Command cmd = ss.str();  /// UNAFold.pl --max=1 ("" | --circular) temporalFile
    etilico::runCommand(cmd);

	/* file output look like this:
     * amountOfNucleotids dG = 'value'  nameSequence
     * nucleotideNumber  nucleotide previus next pairedWith nucleotideNumber   -    -
     *       1                A        0     2       0             1           0    0
     *       .                .        .     .       .             .           .    .
    */

    /// temporalFile.ct is the file to parse
    std::ifstream fileIn((temporalFile + ".ct").c_str());
    if (!fileIn)
    {
        throw RNABackendException("output file not found.");
    }
    HeaderParser headerLine;
    headerLine.parse(fileIn);
    structureRNAm.set_sequence_size(headerLine.numberOfBases);

    BodyLineParser bodyLine;
    while (bodyLine.parse(fileIn))
    {
        fillStructure(bodyLine, structureRNAm);
    }
    structureRNAm.set_circular(isCircRNAm);
    fileIn.close();
    deleteAllFiles(temporalFile);
    return 0;
}
} // namespace fideo
